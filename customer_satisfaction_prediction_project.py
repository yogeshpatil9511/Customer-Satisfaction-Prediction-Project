# -*- coding: utf-8 -*-
"""Customer Satisfaction Prediction Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XyS4v39odGwF3x_fkdrn9ySxVaVZTDFA

# Import necessary **libraries**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.cluster import KMeans

"""# Load the dataset"""

import pandas as pd

data = pd.read_csv("customer_support_tickets.csv")

"""Data Preprocessing:

"""

print(data.head())

"""### Display a Few Rows in a Well-Formatted Table"""

display(data.head())

"""Exploratory Data Analysis (EDA)"""

print(data.info())

print("\nMissing Values:")
print(data.isnull().sum())

print("\nSummary Statistics:")
print(data.describe())

display((data.columns))

"""# Visualizing missing values using a heatmap"""

plt.figure(figsize=(10,6))
sns.heatmap(data.isnull(), cbar=False, cmap="coolwarm")
plt.title("Missing Values Heatmap")
plt.show()

"""# Histogram for numeric features"""

data.hist(figsize=(12, 10), bins=20)
plt.suptitle("Feature Distributions", fontsize=16)
plt.show()

"""# Countplot for categorical features"""

def visualize_categorical_columns(data, categorical_columns=["Category", "Status"]):


    for col in categorical_columns:
        if col in data.columns:
          # Check if column exists
            plt.figure(figsize=(8, 5))
          # Handle missing values by dropping them before plotting:
            sns.countplot(x=data[col].dropna(), palette="viridis")
            plt.title(f"Distribution of {col}")
            plt.xticks(rotation=45, ha='right')
          # Adjust rotation for readability
            plt.tight_layout()
          # Prevents labels from being cut off
            plt.show()
        else:
            print(f"Warning: Column '{col}' not found in the dataset.")

# Assuming your data is loaded into a DataFrame named 'data'
visualize_categorical_columns(data)  # Use default columns or provide your own

"""# Boxplots to detect outliers"""

numeric_columns = data.select_dtypes(include=[np.number]).columns
for col in numeric_columns:
    plt.figure(figsize=(8, 5))
    sns.boxplot(data[col])
    plt.title(f"Boxplot of {col}")
    plt.show()

"""#**Analyze Customer Support Ticket Trends**

# Identify common issues
"""

common_issues = data['Ticket Subject'].value_counts().head(10)
print("Top 10 Common Issues:")
print(common_issues)

"""# Plotting ticket trends over time"""

##2️⃣ **Customer Support Ticket Trends Over Time**
data["YearMonth"] = data["Date of Purchase"].dt.to_period("M")
ticket_trends = data.groupby("YearMonth").size()

plt.figure(figsize=(12, 6))
ticket_trends.plot(kind="line", marker="o", color="red")
plt.title("Customer Support Ticket Trends Over Time")
plt.xlabel("Year-Month")
plt.ylabel("Number of Tickets")
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

"""# Segment customers"""

# Segment based on ticket types
ticket_type_segmentation = data.groupby('Ticket Type').size()
print("\nSegmentation based on Ticket Types:")
print(ticket_type_segmentation)

"""# Segment based on satisfaction levels"""

satisfaction_segmentation = data.groupby('Customer Satisfaction Rating').size()
print("\nSegmentation based on Customer Satisfaction Levels:")
print(satisfaction_segmentation)

"""# Set up the plotting aesthetics"""

sns.set(style="whitegrid")

"""#Customer Satisfaction Distribution"""

plt.figure(figsize=(10, 6))
sns.histplot(data['Customer Satisfaction Rating'], bins=5,
kde=True, color='skyblue')
plt.title('Customer Satisfaction Distribution')
plt.xlabel('Satisfaction Rating')
plt.ylabel('Frequency')
plt.show()

"""#Ticket Status Distribution"""

ticket_status_distribution = data['Ticket Status'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(ticket_status_distribution,
labels=ticket_status_distribution.index, autopct='%1.1f%%',
colors=sns.color_palette('turbo'), startangle=140)
plt.title('Ticket Status Distribution')
plt.axis('equal')
plt.show()

"""#Customer Age Distribution"""

plt.figure(figsize=(10, 6))
sns.histplot(data['Customer Age'], bins=20, kde=True,
color='navy')
plt.title('Customer Age Distribution')
plt.xlabel('Age')

plt.ylabel('Frequency')
plt.show()

"""#Customer Gender Distribution"""

customer_gender_distribution = data['Customer Gender'].value_counts()
plt.figure(figsize=(8, 8))
plt.pie(customer_gender_distribution,
labels=customer_gender_distribution.index, autopct='%1.1f%%',
colors=sns.color_palette('Set1'), startangle=90)
plt.title('Customer Gender Distribution')
plt.axis('equal')
plt.show()

"""#Ticket Channel Distribution"""

plt.figure(figsize=(10, 6))
ticket_channel_distribution = data['Ticket Channel'].value_counts()
sns.barplot(x=ticket_channel_distribution.index,

y=ticket_channel_distribution, palette='rocket')
plt.title('Ticket Channel Distribution')
plt.xlabel('Ticket Channel')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""# Chart 1: Average Customer Satisfaction by Gender (Bar Plot)"""

average_satisfaction = data.groupby('Customer Gender')['Customer Satisfaction Rating'].mean().reset_index()

plt.figure(figsize=(6, 8))
sns.barplot(x='Customer Gender', y='Customer Satisfaction Rating', data=average_satisfaction, palette='muted',
order=['Male', 'Female', 'Other'])
plt.title('Average Customer Satisfaction by Gender')
plt.xlabel('Gender')
plt.ylabel('Average Satisfaction Rating')
plt.ylim(1, 5) # Adjust y-axis limit if needed
plt.show()

"""#Product Purchased Distribution"""

plt.figure(figsize=(10, 6))
product_purchased_distribution = data['Product Purchased'].value_counts().head(10)
sns.barplot(y=product_purchased_distribution.index,
x=product_purchased_distribution, palette='magma')
plt.title('Top 10 Products Purchased')
plt.xlabel('Count')

plt.ylabel('Product')
plt.show()

"""# Top Items Purchased by Gender (Horizontal Bar Chart)"""

plt.figure(figsize=(15, 6))

"""# Top Items Purchased by Males"""

plt.subplot(1, 3, 1)
top_items_male = data[data['Customer Gender'] ==
'Male']['Product Purchased'].value_counts().head(5)
top_items_male.plot(kind='barh', color='skyblue')
plt.title('Top Items Purchased by Males')

plt.xlabel('Count')
plt.ylabel('Product')

"""# Top Items Purchased by Females"""

plt.subplot(1, 3, 2)
top_items_female = data[data['Customer Gender'] ==
'Female']['Product Purchased'].value_counts().head(5)
top_items_female.plot(kind='barh', color='salmon')
plt.title('Top Items Purchased by Females')
plt.xlabel('Count')
plt.ylabel('Product')

"""# Top Items Purchased by Other Gender

"""

plt.subplot(1, 3, 3)
top_items_other = data[data['Customer Gender'] ==
'Other']['Product Purchased'].value_counts().head(5)
top_items_other.plot(kind='barh', color='lightgreen')
plt.title('Top Items Purchased by Other Genders')
plt.xlabel('Count')
plt.ylabel('Product')

"""# Count ticket types"""

ticket_type_distribution = data['Ticket Type'].value_counts()

# Plot
plt.figure(figsize=(8, 6))
ticket_type_distribution.plot(kind='pie', autopct='%1.1f%%',
colors=['saddlebrown', 'peru', 'chocolate', 'rosybrown', 'burlywood'])
plt.title('Ticket Type Distribution')
plt.ylabel('')
plt.show()

"""# Count Ticket Priorities"""

priority_distribution = data['Ticket Priority'].value_counts()

# Plot
plt.figure(figsize=(8, 6))
priority_distribution.plot(kind='pie', autopct='%1.1f%%',
colors=['teal', 'royalblue', 'crimson', 'forestgreen'])
plt.title('Priority Level Distribution')
plt.ylabel('')

plt.show()

# Define age groups
bins = [0, 20, 30, 40, 50, 60, 70, 80, 90, 100]
labels = ['0-20', '21-30', '31-40', '41-50', '51-60', '61-70',
'71-80', '81-90', '91-100']

# Categorize customers into age groups

data['Age Group'] = pd.cut(data['Customer Age'], bins=bins,
labels=labels, right=False)

# Calculate number of tickets raised by each age group
tickets_by_age_group = data.groupby('Age Group').size()

# Plot
plt.figure(figsize=(10, 6))
tickets_by_age_group.plot(kind='bar', color='lightgreen')
plt.title('Tickets Raised by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Tickets Raised')
plt.xticks(rotation=45)
plt.grid(axis='y')
plt.show()

# Replace inf values with NaN
data.replace([np.inf, -np.inf], np.nan, inplace=True)

# Create a facet grid for each ticket type
g = sns.FacetGrid(data, col='Ticket Type', col_wrap=3,
height=5, aspect=1.5)
g.map(sns.histplot, 'Customer Age', bins=20, kde=True)

# Set titles and labels
g.set_titles('{col_name}')
g.set_axis_labels('Age', 'Number of Tickets')
# Adjust layout
plt.subplots_adjust(top=0.9)
g.fig.suptitle('Distribution of Ticket Types by Age')

# Show plot
plt.show()